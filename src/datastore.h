/**
Copyright (C) 2018 MD. Ibrahim Khan

Project Name:
Author: MD. Ibrahim Khan
Author's Email: ib.arshad777@gmail.com

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this
   list of conditions and the following disclaimer in the documentation and/or
   other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of the contributors may
   be used to endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTIONS) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
OF THE POSSIBILITY OF SUCH DAMAGE.
**/

#ifndef DATASTORE_H
#define DATASTORE_H

namespace TextData {

// WPA-PSK
static const char WIFI_NET_TYPE_WPAPSK[] = { 0x57, 0x50, 0x41, 0x2d, 0x50, 0x53, 0x4b, 0x00 };
// WPA-EAP WPA-PSK IEEE8021X NONE
static const char WIFI_NET_TYPE_ALL[] = { 0x57, 0x50, 0x41, 0x2d, 0x45, 0x41, 0x50,
                                          0x20, 0x57, 0x50, 0x41, 0x2d, 0x50, 0x53,
                                          0x4b, 0x20, 0x49, 0x45, 0x45, 0x45, 0x38,
                                          0x30, 0x32, 0x31, 0x58, 0x20, 0x4e, 0x4f,
                                          0x4e, 0x45, 0x00 };
// NONE
static const char WIFI_NET_TYPE_NONE[] = { 0x4e, 0x4f, 0x4e, 0x45, 0x00 };

// WPA-PSK
static const char COMBOBOX_TXT_WPAPSK[] = { 0x57, 0x50, 0x41, 0x2d, 0x50, 0x53, 0x4b, 0x00 };
// NONE
static const char COMBOBOX_TXT_NONE[] = { 0x4e, 0x4f, 0x4e, 0x45, 0x00 };
// Multiple (Adds multiple type)
static const char COMBOBOX_TXT_MULTI[] = { 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
                                           0x65, 0x20, 0x28, 0x41, 0x64, 0x64, 0x73,
                                           0x20, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
                                           0x6c, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65,
                                           0x29, 0x00 };

// Select directory
static const char QFILEDIAG_TITLE[] = { 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x20,
                                        0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
                                        0x72, 0x79, 0x00 };
// Selected Directory : Not selected
static const char QFILEDIAG_LBL_NOT_SELECTED[] = { 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
                                                   0x64, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63,
                                                   0x74, 0x6f, 0x72, 0x79, 0x20, 0x3a, 0x20,
                                                   0x4e, 0x6f, 0x74, 0x20, 0x73, 0x65, 0x6c,
                                                   0x65, 0x63, 0x74, 0x65, 0x64, 0x00 };
// Selected Directory :
static const char QFILEDIAG_LBL_SELECTED[] = { 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
                                               0x64, 0x20, 0x44, 0x69, 0x72, 0x65, 0x63,
                                               0x74, 0x6f, 0x72, 0x79, 0x20, 0x3a, 0x20,
                                               0x00 };

// Enabled
static const char CHKBOX_ENABLED[] = { 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x00 };
// Disabled
static const char CHKBOX_DISABLED[] = { 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
                                        0x64, 0x00 };

// OS Installation : Installed
static const char LBL_OS_INSTALLED[] = { 0x4f, 0x53, 0x20, 0x49, 0x6e, 0x73, 0x74,
                                         0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
                                         0x6e, 0x20, 0x3a, 0x20, 0x49, 0x6e, 0x73,
                                         0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x00 };
// OS Installation : Not installed
static const char LBL_OS_NOT_INSTALLED[] = { 0x4f, 0x53, 0x20, 0x49, 0x6e, 0x73, 0x74,
                                             0x61, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
                                             0x6e, 0x20, 0x3a, 0x20, 0x4e, 0x6f, 0x74,
                                             0x20, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
                                             0x6c, 0x65, 0x64, 0x00 };

// Result
static const char QMSGBOX_RESULT_TITLE[] = { 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x00 };
// Exported Successfully
static const char QMSGBOX_RESULT_SUCCESS[] = { 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
                                               0x64, 0x20, 0x53, 0x75, 0x63, 0x63, 0x65,
                                               0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x00 };
// File creation failed !!!\nDirectory may not be writable or the program does not have write permission...
static const char QMSGBOX_RESULT_FILE_ERROR[] = { 0x46, 0x69, 0x6c, 0x65, 0x20, 0x63, 0x72,
                                                  0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
                                                  0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20,
                                                  0x21, 0x21, 0x21, 0x5c, 0x6e, 0x44, 0x69,
                                                  0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
                                                  0x20, 0x6d, 0x61, 0x79, 0x20, 0x6e, 0x6f,
                                                  0x74, 0x20, 0x62, 0x65, 0x20, 0x77, 0x72,
                                                  0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x20,
                                                  0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
                                                  0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d,
                                                  0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e,
                                                  0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
                                                  0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x20,
                                                  0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
                                                  0x69, 0x6f, 0x6e, 0x2e, 0x2e, 0x2e, 0x00 };
// Complete WiFi data not provided
static const char QMSGBOX_RESULT_WIFI_DAT_ERROR[] = { 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
                                                      0x65, 0x20, 0x57, 0x69, 0x46, 0x69, 0x20,
                                                      0x64, 0x61, 0x74, 0x61, 0x20, 0x6e, 0x6f,
                                                      0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69,
                                                      0x64, 0x65, 0x64, 0x00 };
// Received result is OutOfBound !!!
static const char QMSGBOX_RESULT_OUTOFBOUND[] = { 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
                                                  0x64, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
                                                  0x74, 0x20, 0x69, 0x73, 0x20, 0x4f, 0x75,
                                                  0x74, 0x4f, 0x66, 0x42, 0x6f, 0x75, 0x6e,
                                                  0x64, 0x20, 0x21, 0x21, 0x21, 0x00 };

// No OS
static const char QMSGBOX_OS_INFO_TITLE[] = { 0x4e, 0x6f, 0x20, 0x4f, 0x53, 0x00 };
// OS not installed on selected directory !!!
static const char QMSGBOX_OS_INFO_NO_INSTALL[] = { 0x4f, 0x53, 0x20, 0x6e, 0x6f, 0x74, 0x20,
                                                 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
                                                 0x65, 0x64, 0x20, 0x6f, 0x6e, 0x20, 0x73,
                                                 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
                                                 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
                                                 0x6f, 0x72, 0x79, 0x20, 0x21, 0x21, 0x21,
                                                 0x00 };

// About Author
static const char QMSGBOX_AUTHOR_TITLE[] = { 0x41, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72 };
// MD. Ibrahim Khan<br>Source Repository : <a href='https://bitbucket.org/the-bogeyman/raspi_headless/src'>BitBucket</a>
static const char QMSGBOX_AUTHOR_TEXT[] = { 0x4d, 0x44, 0x2e, 0x20, 0x49, 0x62, 0x72,
                                            0x61, 0x68, 0x69, 0x6d, 0x20, 0x4b, 0x68,
                                            0x61, 0x6e, 0x3c, 0x62, 0x72, 0x3e, 0x53,
                                            0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x52,
                                            0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
                                            0x72, 0x79, 0x20, 0x3a, 0x20, 0x3c, 0x61,
                                            0x20, 0x68, 0x72, 0x65, 0x66, 0x3d, 0x27,
                                            0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f,
                                            0x2f, 0x62, 0x69, 0x74, 0x62, 0x75, 0x63,
                                            0x6b, 0x65, 0x74, 0x2e, 0x6f, 0x72, 0x67,
                                            0x2f, 0x74, 0x68, 0x65, 0x2d, 0x62, 0x6f,
                                            0x67, 0x65, 0x79, 0x6d, 0x61, 0x6e, 0x2f,
                                            0x72, 0x61, 0x73, 0x70, 0x69, 0x5f, 0x68,
                                            0x65, 0x61, 0x64, 0x6c, 0x65, 0x73, 0x73,
                                            0x2f, 0x73, 0x72, 0x63, 0x27, 0x3e, 0x42,
                                            0x69, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65,
                                            0x74, 0x3c, 0x2f, 0x61, 0x3e, 0x00 };

// bootcode.bin
static const char OS_INSTALLATION_FILE_NAME[] = { 0x62, 0x6f, 0x6f, 0x74, 0x63, 0x6f, 0x64,
                                                0x65, 0x2e, 0x62, 0x69, 0x6e, 0x00 };

// /ssh
static const char FILE_NAME_SSH[] = { 0x2f, 0x73, 0x73, 0x68, 0x00 };
// /wpa_supplicant.conf
static const char FILE_NAME_WIFI_CONF[] = { 0x2f, 0x77, 0x70, 0x61, 0x5f, 0x73, 0x75,
                                            0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e,
                                            0x74, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x00 };

// country=BD
static const char WIFI_CONF_FILE_P1_L1[] = { 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
                                             0x3d, 0x42, 0x44, 0x0d, 0x0a, 0x00 };
// ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
static const char WIFI_CONF_FILE_P1_L2[] = { 0x63, 0x74, 0x72, 0x6c, 0x5f, 0x69, 0x6e,
                                             0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
                                             0x3d, 0x44, 0x49, 0x52, 0x3d, 0x2f, 0x76,
                                             0x61, 0x72, 0x2f, 0x72, 0x75, 0x6e, 0x2f,
                                             0x77, 0x70, 0x61, 0x5f, 0x73, 0x75, 0x70,
                                             0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74,
                                             0x20, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x3d,
                                             0x6e, 0x65, 0x74, 0x64, 0x65, 0x76, 0x0d,
                                             0x0a, 0x00 };
// update_config=1
static const char WIFI_CONF_FILE_P1_L3[] = { 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
                                             0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3d,
                                             0x31, 0x0d, 0x0a, 0x00 };
// \r\n (new line)
static const char WIFI_CONF_FILE_P1_L4[] = { 0x0d, 0x0a, 0x00 };
// network={
static const char WIFI_CONF_FILE_P1_L5[] = { 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
                                             0x3d, 0x7b, 0x0d, 0x0a, 0x00 };
//     ssid="
static const char WIFI_CONF_FILE_P1_L6[] = { 0x20, 0x20, 0x20, 0x20, 0x73, 0x73, 0x69,
                                             0x64, 0x3d, 0x22, 0x00 };

// "
static const char WIFI_CONF_FILE_P2_L1[] = { 0x22, 0x0d, 0x0a, 0x00 };
//     scan_ssid=1
static const char WIFI_CONF_FILE_P2_L2[] = { 0x20, 0x20, 0x20, 0x20, 0x73, 0x63, 0x61,
                                             0x6e, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x3d,
                                             0x31, 0x0d, 0x0a, 0x00 };
//     psk="
static const char WIFI_CONF_FILE_P2_L3[] = { 0x20, 0x20, 0x20, 0x20, 0x70, 0x73, 0x6b,
                                             0x3d, 0x22, 0x00 };
// "
static const char WIFI_CONF_FILE_P3_L1[] = { 0x22, 0x0d, 0x0a, 0x00 };
//     key_mgmt=
static const char WIFI_CONF_FILE_P3_L2[] = { 0x20, 0x20, 0x20, 0x20, 0x6b, 0x65, 0x79,
                                             0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x3d, 0x00 };

// \r\n (new line)
static const char WIFI_CONF_FILE_P4_L1[] = { 0x0d, 0x0a, 0x00 };
// }
static const char WIFI_CONF_FILE_P4_L2[] = { 0x7d, 0x0d, 0x0a, 0x00 };
}

#endif // DATASTORE_H
